from pymongo import MongoClient
from bson import Binary
import base64

# # Connect to MongoDB
# client = MongoClient("mongodb://localhost:27017/")
# db = client["test_database"]
# collection = db["users"]

# # Insert data
# collection.insert_one({"name": "Alice", "age": 25})

# # Query data
# user = collection.find_one({"name": "Alice"})
# print(user)


class MongoDBHandler:
    def __init__(self, uri="mongodb://localhost:27017/", database_name="images_db"):
        """
        Initialize the MongoDBHandler class.

        :param uri: MongoDB connection URI
        :type uri: str
        :param database_name: Name of the database to connect to
        :type database_name: str
        """
        self.client = MongoClient(uri)
        self.database = self.client[database_name]
        self.imageCollection = self.database["images"]
        print(self.imageCollection)
        print(
            f"Connected to MongoDB at {uri}, database: {database_name} with a collection: images"
        )

    def insert_document(self, collection_name, document):
        """
        Insert a document into a collection.

        :param collection_name: Name of the collection
        :type collection_name: str
        :param document: The document to insert
        :type document: dict
        :return: Inserted document's ID
        :rtype: ObjectId
        """
        collection = self.database[collection_name]
        result = collection.insert_one(document)
        return result.inserted_id

    def find_documents(self, collection_name, query=None):
        """
        Find documents in a collection.

        :param collection_name: Name of the collection
        :type collection_name: str
        :param query: Query to filter documents (default is None, which returns all documents)
        :type query: dict, optional
        :return: List of matching documents
        :rtype: list
        """
        collection = self.database[collection_name]
        return list(collection.find(query or {}))

    def update_document(self, collection_name, query, update):
        """
        Update a document in a collection.

        :param collection_name: Name of the collection
        :type collection_name: str
        :param query: Query to find the document to update
        :type query: dict
        :param update: Update to apply (e.g., {"$set": {"field": "value"}})
        :type update: dict
        :return: The result of the update operation
        :rtype: UpdateResult
        """
        collection = self.database[collection_name]
        return collection.update_one(query, update)

    def delete_document(self, collection_name, query):
        """
        Delete a document from a collection.

        :param collection_name: Name of the collection
        :type collection_name: str
        :param query: Query to find the document to delete
        :type query: dict
        :return: The result of the delete operation
        :rtype: DeleteResult
        """
        collection = self.database[collection_name]
        return collection.delete_one(query)

    def list_collections(self):
        """
        List all collections in the database.

        :return: List of collection names
        :rtype: list
        """
        return self.database.list_collection_names()

    def close_connection(self):
        """
        Close the connection to MongoDB.
        """
        self.client.close()
        print("MongoDB connection closed.")

    def encode_image(self, image):
        """
        Encodes an image from binary to Base64 string

        :param image: image name
        :type image: image

        :return: encoded image
        :type: base64
        """
        # Read the image file and encode it to Base64
        with open(image, "rb") as image_file:
            base64_image = base64.b64encode(image_file.read()).decode("utf-8")

        return base64_image

    def decode_image(self, image):
        """
        Decodes an image from Base64 to binary

        :param image: image name
        :type image: image

        :return: decoded image
        :type: binary
        """
        binary_image = base64.b64decode(image)

        # Save the image to a file
        with open("retrieved_example.jpg", "wb") as output_file:
            output_file.write(binary_image)

        return output_file

    # Specific Functions
    def store_image_critique(self, image, critique, theme):
        """
        Stores the image, image file name stored on Gemini, and the critique generated by Gemini

        :param image: Image path from image uploaded
        :type image: string
        :param critique: AI generated critique from Gemini
        :type critique: string
        :param theme: Theme that the image is based off
        :type theme: string

        :return:
        :rtype:
        """
        # validate data

        # Encode image to base64
        base64_image = self.encode_image(image)

        # create the document for storing
        document = {
            "filename": image,
            "image_base64": base64_image,
            "critique": critique,
            "theme": theme,
        }

        result = self.collection.insert_one(document)
        print(f"Image critique is stored with ID: {result.inserted_id}")
        return result.inserted_id


# FOR TESTING PURPOSES (DELETE AFTER)
if __name__ == "__main__":
    # Initialize the MongoDBHandler
    db_handler = MongoDBHandler()

    # # Insert a document
    # doc_id = db_handler.insert_document("images", {"name": "Alice", "age": 25})
    # print(f"Inserted document with ID: {doc_id}")

    # # Find all documents
    # users = db_handler.find_documents("images")
    # print("images:", users)

    # # Update a document
    # update_result = db_handler.update_document(
    #     "images", {"name": "Alice"}, {"$set": {"age": 26}}
    # )
    # print(f"Modified {update_result.modified_count} document(s)")

    # # Delete a document
    # delete_result = db_handler.delete_document("images", {"name": "Alice"})
    # print(f"Deleted {delete_result.deleted_count} document(s)")

    # # List all collections
    # print("Collections:", db_handler.list_collections())

    # # # Drop the database
    # db_name = "my_database"
    # db_handler.client.drop_database(db_name)
    # print(f"Database '{db_name}' has been deleted.")

    while True:
        print("\n=== Image Functions Test Menu ===")
        print("1. Store image")
        print("2. Encode Image")
        print("3. Decode Image")
        print("4. Exit")
        choice = input("Enter your choice (1-4): ").strip()

        if choice == "1":
            try:
                stored_image = db_handler.store_image_critique(
                    "_DSC3940.JPG",
                    "This is the test critique",
                    "This is the test theme",
                )
            except Exception as e:
                print(f"Error storing image: {e}")
        elif choice == "2":
            try:
                encoded_image = db_handler.encode_image("_DSC3940.JPG")
            except Exception as e:
                print(f"Error encoding image: {e}")
        elif choice == "3":
            try:
                decoded_image = db_handler.decode_image(encoded_image)
                print(decoded_image)
            except Exception as e:
                pass
        elif choice == "4":
            print("Exiting...")
            break

        else:
            print("Invalid choice. Please enter a valid option.")

    # Close the connection
    db_handler.close_connection()
